package com.haru.controller;

import java.util.List;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.haru.model.BoardListVO;
import com.haru.model.Criteria;
import com.haru.model.PageMakerDTO;
import com.haru.model.ReplyVO;
import com.haru.service.BoardListService;
import com.haru.service.ReplyService;

@Controller
public class BoardListController {

	@Autowired
	private BoardListService boardListService;
	
	@Autowired
	private ReplyService replyService;
	
	  /* 블로그 메인 페이지 */
	  @GetMapping("/")
	  public String ListAll(Model model, @RequestParam(required = false) String keyword, BoardListVO vo) throws Exception { 
	  
	  List<BoardListVO> boardList;
	  if (keyword != null && !keyword.isEmpty()) {
		    boardList = boardListService.search(keyword); //검색
		  } else {
		    boardList = boardListService.viewAll(vo); //검색어가 없거나 비어있으면 전체 게시물 조회
		  }
		  model.addAttribute("viewAll", boardList);
	  return "/boardList/main"; 
	  }
	 
	/* 여행 페이지 */  
	@GetMapping("/travel")
	public String travleForm(Model model, @RequestParam("c") String category,  Criteria cri) throws Exception {

		cri.setCategory(category); //카테고리 설정
		List<BoardListVO> list = boardListService.getListPaging(cri); // 카테고리별로 페이징된 목록을 가져옴

		for(BoardListVO board : list) {
			int replyCnt = boardListService.getReplyCount(board.getBno()); 
			board.setReplyCnt(replyCnt);	//댓글갯수 설정                              
		}    
		model.addAttribute("list", list);
	    
		int total = boardListService.getTotal(category);    //카테고리별 게시물 총 갯수

		PageMakerDTO pageMake = new PageMakerDTO(cri, total);

		model.addAttribute("pageMaker", pageMake);

		return "/boardList/travel";
	}

	/* 카페 페이지 */
	@GetMapping("/cafe")
	public String cafeForm(Model model, @RequestParam("c") String category,  Criteria cri) throws Exception {

		cri.setCategory(category); //카테고리 설정
		List<BoardListVO> list = boardListService.getListPaging(cri); // 카테고리별로 페이징된 목록을 가져옴

		for(BoardListVO board : list) {
			int replyCnt = boardListService.getReplyCount(board.getBno()); 
			board.setReplyCnt(replyCnt);	//댓글갯수 설정                              
		}    
		model.addAttribute("list", list);
	    
		int total = boardListService.getTotal(category);    //카테고리별 게시물 총 갯수

		PageMakerDTO pageMake = new PageMakerDTO(cri, total);

		model.addAttribute("pageMaker", pageMake);

		return "/boardList/cafe";
	}

	/* 맛집 페이지 */
	@GetMapping("/bestStore")
	public String bestStoreForm(Model model, @RequestParam("c") String category, Criteria cri) throws Exception {

		cri.setCategory(category); //카테고리 설정
		List<BoardListVO> list = boardListService.getListPaging(cri); // 카테고리별로 페이징된 목록을 가져옴

		for(BoardListVO board : list) {
			int replyCnt = boardListService.getReplyCount(board.getBno()); 
			board.setReplyCnt(replyCnt);	//댓글갯수 설정                              
		}    
		model.addAttribute("list", list);
	    
		int total = boardListService.getTotal(category);    //카테고리별 게시물 총 갯수

		PageMakerDTO pageMake = new PageMakerDTO(cri, total);

		model.addAttribute("pageMaker", pageMake);
		
		return "/boardList/bestStore";
	}

	/* 취미 페이지 */
	@GetMapping("/hobby")
	public String hobbyForm(Model model, @RequestParam("c") String category,  Criteria cri) throws Exception {

		cri.setCategory(category); //카테고리 설정
		List<BoardListVO> list = boardListService.getListPaging(cri); // 카테고리별로 페이징된 목록을 가져옴

		for(BoardListVO board : list) {
			int replyCnt = boardListService.getReplyCount(board.getBno()); 
			board.setReplyCnt(replyCnt);	//댓글갯수 설정                              
		}    
		model.addAttribute("list", list);
	    
		int total = boardListService.getTotal(category);    //카테고리별 게시물 총 갯수

		PageMakerDTO pageMake = new PageMakerDTO(cri, total);

		model.addAttribute("pageMaker", pageMake);

		return "/boardList/hobby";
	}

	/* 게시물 상세 조회 */
	@GetMapping("/get")
	public String boardPageGET(@RequestParam("bno") String bnoParam, Model model){
	    try {
		String bno = bnoParam.substring(bnoParam.lastIndexOf("=") + 1); // "/get?bno=숫자"에서 "=" 이후의 숫자 값 추출
	    int boardNo = Integer.parseInt(bno); // 숫자 값 문자열을 int로 변환
		
		BoardListVO board = boardListService.getPage(boardNo);
		
		model.addAttribute("pageInfo", board);
		
		List<ReplyVO> readReply = replyService.replyList(boardNo);
		model.addAttribute("readReply", readReply);

		return "/boardList/get";
		
	    } catch (Exception e) {
	        // 예외 처리
	        model.addAttribute("error", "게시물을 가져오는 도중 오류가 발생했습니다.");
	        return "error-page"; // 오류 페이지로 이동하거나 다른 처리 방식을 선택할 수 있습니다.
	    }
	}

	/* 게시물 등록 페이지*/
	@GetMapping("/writing")
	public String blogWriting() {
		return "/boardList/writing";
	}

	/* 게시물 등록 */
	@PostMapping("/write")
	public String boardEnroll(BoardListVO vo) throws Exception {
		
		boardListService.writing(vo);

		return "redirect:/";
	}
	
	/* 게시물 수정 페이지 이동 */
	 @GetMapping("/modify")
	  public String boardModifyGET(int bno, Model model) throws Exception{
	        
	   model.addAttribute("pageInfo",  boardListService.getPage(bno));
	        
	   return "/boardList/modify";
	    }

	    /* 페이지 수정 */
	    @PostMapping("/modify")
	    public String boardModifyPOST(BoardListVO vo) throws Exception{
	        
	        boardListService.update(vo);
	        
	        return "redirect:/";
	        
	    }
	 	
	/* 댓글 등록 */
	@PostMapping("/saveReply")
	public String saveReplyForm(ReplyVO vo) throws Exception{
		
		
		replyService.saveReply(vo);
				
		return "redirect:/get?bno=" +vo.getBno();
	}
	
	/* 댓글 삭제 */
	@PostMapping("/deleteReply")
	public String deleteReply(ReplyVO vo)throws Exception{
		
		replyService.deleteReply(vo);
		
		return "redirect:/get?bno="+vo.getBno();
	}

}